<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.0.xsd  
           http://www.springframework.org/schema/aop  
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
           http://www.springframework.org/schema/tx   
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/task
		   http://www.springframework.org/schema/task/spring-task-3.0.xsd">


	<!-- properties文件来引入设置属性 -->
	<context:property-placeholder location="classpath:/lifedjtu-custom.properties" />
	<!-- 用注解方式注入bean -->
	<context:annotation-config />
	<context:component-scan base-package="com.lifedjtu.jw.dao.impl" />
	<context:component-scan base-package="com.lifedjtu.jw.business.impl" />
	<context:component-scan base-package="com.lifedjtu.jw.business.task.impl" />
	<!-- 转变JDBC异常 -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	<!-- 数据库连接池 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${driverClassName}" />

		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	</bean>
	<!-- hibernate sessionFactory 创建 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.lifedjtu.jw.pojos</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
			</props>
		</property>
	</bean>
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	<!-- 事物配置 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:annotation-driven />
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="upsert" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	<bean id="serviceAround" class="com.lifedjtu.jw.business.support.ServiceAround"></bean>
	
	<aop:config>
		<aop:pointcut expression="execution(public * com.lifedjtu.jw.dao.impl..*.*(..))"
			id="dao-transaction" />
        <aop:pointcut id="booleanReturnCut"
                      expression="execution(public boolean com.lifedjtu..*.business.*Service+.*(..))" />
        <aop:pointcut id="entityObjectReturnCut"
                      expression="execution(public com.lifedjtu.jw.pojos.EntityObject+ com.lifedjtu..*.business.*Service+.*(..))" />
        <aop:pointcut id="collectionObjectReturnCut"
                      expression="execution(public java.util.Collection+ com.lifedjtu..*.business.*Service+.*(..))" />

        <aop:advisor advice-ref="txAdvice" pointcut-ref="dao-transaction" />

        <aop:aspect ref="serviceAround">

			<aop:around pointcut-ref="booleanReturnCut"
				method="booleanAroundMethod"/>
			<aop:around pointcut-ref="entityObjectReturnCut"
				method="objectAroundMethod"  />
			<aop:around pointcut-ref="collectionObjectReturnCut"
				method="objectAroundMethod"  />
			
		</aop:aspect>


    </aop:config>

	<task:annotation-driven executor="lifeDjtuExecutor"
		scheduler="lifeDjtuScheduler" />
	<task:executor id="lifeDjtuExecutor" pool-size="5" />
	<task:scheduler id="lifeDjtuScheduler" pool-size="10" />


</beans>